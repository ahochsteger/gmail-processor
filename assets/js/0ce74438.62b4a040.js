"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[342],{9654:(e,t,a)=>{a.d(t,{Z:()=>ge});var i=a(1262),s=a(2949),n=a(7294),r=a(9781),o=a.n(r),l=a(2401),c=a(4040),d=a(1144),m=a(7305);a(8706);function h(e,t,a,i){return void 0===a&&(a={}),void 0===i&&(i=[]),i=i.concat([]),Object.keys(e).forEach((s=>{const n=function(e,t){return Array.isArray(e)&&t?e=e.map((e=>t(e))):"object"==typeof e&&t&&(e=t(e)),e}(e[s],a[s]),r=JSON.stringify(n);i.includes(s)||null!==n&&r!==JSON.stringify(t[s])&&"[]"!==r&&"{}"!==r||delete e[s]})),e}var f=a(4942);let u=function(e){return e.PRE_MAIN="pre-main",e.MAIN="main",e.POST_MAIN="post-main",e}({}),g=(0,l.Z)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",decorators:[(0,c.C)()],key:"args",value:()=>({})},{kind:"field",decorators:[(0,c.C)()],key:"description",value:()=>""},{kind:"field",decorators:[(0,c.C)()],key:"name",value:()=>""},{kind:"field",decorators:[(0,c.C)()],key:"processingStage",value:()=>u.POST_MAIN}]}}));class p extends g{constructor(){super(...arguments),(0,f.Z)(this,"name","")}}class y extends g{constructor(){super(...arguments),(0,f.Z)(this,"name","")}}class b extends g{constructor(){super(...arguments),(0,f.Z)(this,"name","")}}function v(e){return void 0===e&&(e={}),(0,m.yE)(p,e,{exposeDefaultValues:!0,exposeUnsetFields:!1})}function k(e){return e=h(e,v())}class T{constructor(){(0,f.Z)(this,"contentType",".*"),(0,f.Z)(this,"includeAttachments",!0),(0,f.Z)(this,"includeInlineImages",!0),(0,f.Z)(this,"largerThan",-1),(0,f.Z)(this,"name","(.*)"),(0,f.Z)(this,"smallerThan",-1)}}function C(e){return void 0===e&&(e={}),(0,m.yE)(T,e,{exposeDefaultValues:!0,exposeUnsetFields:!1})}function x(e){return e=h(e,C())}let E=(0,l.Z)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>b))],key:"actions",value:()=>[]},{kind:"field",decorators:[(0,c.C)()],key:"description",value:()=>""},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>T))],key:"match",value:()=>new T},{kind:"field",decorators:[(0,c.C)()],key:"name",value:()=>""}]}}));function M(e){return e.match=e.match??C(),e}function A(e){var t;return e=h(e,(void 0===t&&(t={}),(0,m.yE)(E,M(t),{exposeDefaultValues:!0,exposeUnsetFields:!1})),{actions:k,match:x})}class P{constructor(){(0,f.Z)(this,"body",".*"),(0,f.Z)(this,"from",".*"),(0,f.Z)(this,"is",[]),(0,f.Z)(this,"newerThan",""),(0,f.Z)(this,"olderThan",""),(0,f.Z)(this,"plainBody",".*"),(0,f.Z)(this,"subject",".*"),(0,f.Z)(this,"to",".*")}}function S(e){return void 0===e&&(e={}),(0,m.yE)(P,e,{exposeDefaultValues:!0,exposeUnsetFields:!1})}function F(e){return e=h(e,S())}let R=(0,l.Z)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>y))],key:"actions",value:()=>[]},{kind:"field",decorators:[(0,c.C)()],key:"description",value:()=>""},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>E))],key:"attachments",value:()=>[]},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>P))],key:"match",value:()=>new P},{kind:"field",decorators:[(0,c.C)()],key:"name",value:()=>""}]}}));function D(e){return e.attachments=function(e){for(const t of e)M(t);return e}(e.attachments??[]),e.match=e.match??S(),e}function w(e){var t;return e=h(e,(void 0===t&&(t={}),(0,m.yE)(R,D(t),{exposeDefaultValues:!0,exposeUnsetFields:!1})),{actions:k,attachments:A,match:F})}let $=(0,l.Z)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",decorators:[(0,c.C)()],key:"firstMessageSubject",value:()=>".*"},{kind:"field",decorators:[(0,c.C)()],key:"labels",value:()=>".*"},{kind:"field",decorators:[(0,c.C)()],key:"maxMessageCount",value:()=>-1},{kind:"field",decorators:[(0,c.C)()],key:"minMessageCount",value:()=>1},{kind:"field",decorators:[(0,c.C)()],key:"query",value:()=>""}]}}));function L(e){return void 0===e&&(e={}),e.query=e.query??O,(0,m.yE)($,e,{exposeDefaultValues:!0,exposeUnsetFields:!1})}function j(e){return e=h(e,L())}let Z=(0,l.Z)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>p))],key:"actions",value:()=>[]},{kind:"field",decorators:[(0,c.C)()],key:"description",value:()=>""},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>R))],key:"messages",value:()=>[]},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>E))],key:"attachments",value:()=>[]},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>$))],key:"match",value:()=>new $},{kind:"field",decorators:[(0,c.C)()],key:"name",value:()=>""}]}}));function G(e){return void 0===e&&(e={}),(0,m.yE)(Z,I(e),{exposeDefaultValues:!0,exposeUnsetFields:!1})}function I(e){return e.messages=e.messages??[],void 0!==e.attachments&&e.attachments?.length>0&&(e.messages.push({attachments:e.attachments}),delete e.attachments),e.messages=function(e){for(const t of e)D(t);return e}(e.messages),e.match=e.match??L(),e}function U(e){return e=h(e,G(),{actions:k,messages:w,attachments:A,match:j})}const V="has:attachment -in:trash -in:drafts -in:spam",O=`${V} newer_than:1d`;class N{constructor(e,t){this.key=e,this.value=t}}let _=(0,l.Z)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>E))],key:"attachment",value:()=>new E},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>R))],key:"message",value:()=>new R},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>Z))],key:"thread",value:()=>new Z},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>N))],key:"variables",value:()=>[]}]}}));function z(e){return e.thread=I(e.thread??{}),e.message=D(e.message??{}),e.attachment=M(e.attachment??{}),e}function q(e){var t;return e=h(e,(void 0===t&&(t={}),(0,m.yE)(_,z(t),{exposeDefaultValues:!0,exposeUnsetFields:!1})),{attachment:A,message:w,thread:U})}let J=function(e){return e.READ="read",e.STARRED="starred",e.UNREAD="unread",e.UNSTARRED="unstarred",e}({});let B=function(e){return e.ADD_THREAD_LABEL="add-label",e.CUSTOM="custom",e.MARK_MESSAGE_READ="mark-read",e}({}),H=(0,l.Z)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",decorators:[(0,c.C)()],key:"logSheetLocation",value:()=>""},{kind:"field",decorators:[(0,c.C)()],key:"maxBatchSize",value:()=>10},{kind:"field",decorators:[(0,c.C)()],key:"maxRuntime",value:()=>280},{kind:"field",decorators:[(0,c.C)()],key:"markProcessedLabel",value:()=>""},{kind:"field",decorators:[(0,c.C)()],key:"markProcessedMethod",value:()=>B.MARK_MESSAGE_READ},{kind:"field",decorators:[(0,c.C)()],key:"sleepTimeThreads",value:()=>100},{kind:"field",decorators:[(0,c.C)()],key:"sleepTimeMessages",value:()=>0},{kind:"field",decorators:[(0,c.C)()],key:"sleepTimeAttachments",value:()=>0},{kind:"field",decorators:[(0,c.C)()],key:"timezone",value:()=>"default"}]}}));function K(e){var t;return e=h(e,(void 0===t&&(t={}),(0,m.yE)(H,t,{exposeDefaultValues:!0,exposeUnsetFields:!1})),{},["markProcessedMethod"])}let W=(0,l.Z)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",decorators:[(0,c.C)()],key:"description",value:()=>""},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>_))],key:"global",value:()=>new _},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>Z))],key:"threads",value:()=>[]},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>H))],key:"settings",value:()=>new H}]}}));(0,l.Z)(null,(function(e,t){return{F:class extends t{constructor(){super(...arguments),e(this)}},d:[{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>R))],key:"messages",value:()=>[]},{kind:"field",decorators:[(0,c.C)(),(0,d.D)((()=>E))],key:"attachments",value:()=>[]}]}}),W);function Q(e){if(!e.settings?.markProcessedMethod)throw new Error("No markProcessedMethod not set in settings! Make sure to choose from one of the available methods.");const t=(0,m.yE)(W,function(e){e.threads=e.threads??[],void 0!==e.attachments&&e.attachments?.length>0&&(e.messages=e.messages??[],e.messages.push({attachments:e.attachments}),delete e.attachments);void 0!==e.messages&&e.messages?.length>0&&(e.threads.push({messages:e.messages}),delete e.messages);switch(e.settings=e.settings??{},e.global=z(e.global??{}),e.global.thread=e.global.thread??{},e.global.thread.actions=e.global.thread.actions??[],e.global.thread.match=e.global.thread.match??{},e.global.message=e.global.message??{},e.global.message.actions=e.global.message.actions??[],e.global.message.match=e.global.message.match??{},e.global.attachment=e.global.attachment??{},e.global.attachment.actions=e.global.attachment.actions??[],e.settings.markProcessedMethod){case B.ADD_THREAD_LABEL:e.global.thread.match.query+=` -label:${e.settings.markProcessedLabel}`,e.global.thread.actions.push({name:"thread.addLabel",args:{label:e.settings.markProcessedLabel},processingStage:u.POST_MAIN});break;case B.CUSTOM:break;case B.MARK_MESSAGE_READ:e.global.message.match.is=(e.global.message.match.is??[]).concat([J.UNREAD]),e.global.message.actions.push({name:"message.markRead",processingStage:u.POST_MAIN})}return e.threads=function(e){for(const t of e)I(t);return e}(e.threads),e}(e),{exposeDefaultValues:!0,exposeUnsetFields:!1});if(t.threads.length<1)throw new Error("No thread configuration found! Make sure there is at least one thread configuration present!");return t}var X=a(8385);let Y=function(e){return e.BACKUP="backup",e.ERROR="error",e.KEEP="keep",e.REPLACE="replace",e.SKIP="skip",e.UPDATE="update",e}({});class ee{constructor(){(0,f.Z)(this,"archive",!1),(0,f.Z)(this,"filenameFrom",""),(0,f.Z)(this,"filenameFromRegexp",""),(0,f.Z)(this,"filenameTo",""),(0,f.Z)(this,"filter",""),(0,f.Z)(this,"folder",""),(0,f.Z)(this,"newerThan",""),(0,f.Z)(this,"parentFolderId",""),(0,f.Z)(this,"ruleLabel",""),(0,f.Z)(this,"saveMessagePDF",!1),(0,f.Z)(this,"saveThreadPDF",!1),(0,f.Z)(this,"skipPDFHeader",!1)}}let te=(0,l.Z)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",key:"globalFilter",value:()=>"has:attachment -in:trash -in:drafts -in:spam"},{kind:"field",key:"processedLabel",value:()=>"to-gdrive/processed"},{kind:"field",key:"sleepTime",value:()=>100},{kind:"field",key:"maxRuntime",value:()=>280},{kind:"field",key:"newerThan",value:()=>"2m"},{kind:"field",key:"timezone",value:()=>"UTC"},{kind:"field",decorators:[(0,d.D)((()=>ee))],key:"rules",value:()=>[]}]}}));class ae{static convertDateFormat(e){const t=e.replace(/u/g,"i"),a=RegExp(/[Fa]/).exec(t);if(a)throw new Error(`Conversion of date format not possible - unsupported date format '${a[0]}' in format string '${e}'!`);return t}static sanitizeLocation(e,t){return t&&""!==e&&!e.startsWith("/")&&(e=`/${e}`),t&&e.endsWith("/")&&(e=e.slice(0,-1)),e}static convertFromV1Pattern(e,t){const a=/('([^']+)')?([^']+)('([^']+)')?/g;if(e.match(/^'([^'\n]+)'$/g))e=e.replace(/'/g,"");else{const i=/:oldDateFormat:([^}]+)}/g,s=(e=e.replace(a,`$2\${${t}:oldDateFormat:$3}$5`)).matchAll(i);for(const t of s)if(t.length>1){const a=this.convertDateFormat(t[1]);e=e.replace(/:oldDateFormat:[^}]+}/g,`:format:${a}}`)}}return e=e.replace(/%s/g,"${message.subject}").replace(/%o/g,"${attachment.name}").replace(/%filename/g,"${attachment.name}").replace(/#SUBJECT#/g,"${message.subject}").replace(/#FILE#/g,"${attachment.name}").replace(/%d/g,"${threadConfig.index}")}static getLocationFromRule(e,t){let a;a=e.filenameFromRegexp?"${attachment.name.match.1}":e.filenameTo?this.sanitizeLocation(this.convertFromV1Pattern(e.filenameTo,"message.date"),!1):t;let i="";return i+=e.folder.indexOf("'")>=0?this.convertFromV1Pattern(e.folder,"message.date"):e.folder,i=this.sanitizeLocation(i,!0),e.parentFolderId&&(i=`{id:${e.parentFolderId}}${i}`),`${i}/${a}`}static v1RuleToV2ThreadConfig(e){const t={actions:[],attachments:[],messages:[],match:{}},a={},i={};var s;i.actions=[],a.match={},a.actions=[],e.filter&&(t.match.query=e.filter),e.newerThan&&""!=e.newerThan&&(t.match.query=(t.match.query??"")+` newer_than:${e.newerThan}`),e.saveMessagePDF?(i.actions.push((void 0===(s={name:"message.storePDF",args:{location:this.getLocationFromRule(e,"${message.subject}.pdf"),skipHeader:!0===e.skipPDFHeader}})&&(s={}),(0,m.yE)(y,s,{exposeDefaultValues:!0,exposeUnsetFields:!1}))),t.messages.push(i)):(e.filenameFromRegexp&&(a.match.name=e.filenameFromRegexp),e.filenameFrom&&e.filenameTo&&(a.match.name=String(e.filenameFrom).replace(/[\\^$*+?.()|[\]{}]/g,"\\$&")),a.actions.push(function(e){return void 0===e&&(e={}),(0,m.yE)(b,e,{exposeDefaultValues:!0,exposeUnsetFields:!1})}({name:"attachment.store",args:{conflictStrategy:Y.KEEP,description:"Mail title: ${message.subject}\nMail date: ${message.date}\nMail link: https://mail.google.com/mail/u/0/#inbox/${message.id}",location:this.getLocationFromRule(e,"${attachment.name}")}})),t.attachments.push(a)),e.saveThreadPDF&&t.actions.push(v({name:"thread.storePDF",args:{location:this.getLocationFromRule(e,"${thread.firstMessageSubject}.pdf")}})),""!=e.ruleLabel&&t.actions.push(v({name:"thread.addLabel",args:{label:e.ruleLabel}})),e.archive&&t.actions.push(v({name:"thread.moveToArchive"}));return G(t)}static v1ConfigToV2ConfigJson(e){const t=function(e){void 0===e&&(e={});const t=(0,m.yE)(te,e,{exposeDefaultValues:!0,exposeUnsetFields:!1});if(t.rules.length<1)throw new Error("No rules found - make sure there is at least one rule present!");return t}(e),a=t.rules.map((e=>this.v1RuleToV2ThreadConfig(e)));return{global:{thread:{match:{query:`${t.globalFilter||V} newer_than:${t.newerThan||"1d"}`}}},settings:{markProcessedMethod:B.ADD_THREAD_LABEL,markProcessedLabel:t.processedLabel,sleepTimeThreads:t.sleepTime,maxRuntime:t.maxRuntime,timezone:t.timezone},threads:a}}static v1ConfigToV2Config(e){return Q(this.v1ConfigToV2ConfigJson(e))}}const ie=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","additionalProperties":false,"definitions":{"V1Rule":{"additionalProperties":false,"properties":{"archive":{"default":false,"description":"Archive thread after processing","title":"archive","type":"boolean"},"filenameFrom":{"default":"","description":"Rename matching attachments from the given filename","title":"filenameFrom","type":"string"},"filenameFromRegexp":{"default":"","description":"Rename matching attachments from the given filename regex","title":"filenameFromRegexp","type":"string"},"filenameTo":{"default":"","description":"Rename matching attachments to the given filename","title":"filenameTo","type":"string"},"filter":{"default":"","description":"Search filter for threads","title":"filter","type":"string"},"folder":{"default":"","description":"GDrive folder to store attachments to","title":"folder","type":"string"},"newerThan":{"default":"","description":"Restrict to threads containing messages newer than the given relative date/time","title":"newerThan","type":"string"},"parentFolderId":{"default":"","description":"Parent folder ID to be used (for shared drives)","title":"parentFolderId","type":"string"},"ruleLabel":{"default":"","description":"Add the given label to the processed thread","title":"ruleLabel","type":"string"},"saveMessagePDF":{"default":false,"description":"Save the message to PDF","title":"saveMessagePDF","type":"boolean"},"saveThreadPDF":{"default":false,"description":"Save the thread to PDF","title":"saveThreadPDF","type":"boolean"},"skipPDFHeader":{"default":false,"description":"Skip header for PDF","title":"skipPDFHeader","type":"boolean"}},"required":["filter","folder"],"title":"V1Rule","type":"object"}},"properties":{"globalFilter":{"default":"has:attachment -in:trash -in:drafts -in:spam","description":"Global filter","title":"globalFilter","type":"string"},"maxRuntime":{"default":280,"description":"Maximum script runtime in seconds (google scripts will be killed after 5 minutes)","title":"maxRuntime","type":"number"},"newerThan":{"default":"2m","description":"Only process message newer than (leave empty for no restriction; use d, m and y for day, month and year)","title":"newerThan","type":"string"},"processedLabel":{"default":"to-gdrive/processed","description":"GMail label for processed threads (will be created, if not existing)","title":"processedLabel","type":"string"},"rules":{"default":[],"description":"Processing rules","items":{"$ref":"#/definitions/V1Rule"},"title":"rules","type":"array"},"sleepTime":{"default":100,"description":"Sleep time in milliseconds between processed messages","title":"sleepTime","type":"number"},"timezone":{"default":"UTC","description":"Timezone for date/time operations","title":"timezone","type":"string"}},"required":["maxRuntime","newerThan","processedLabel","rules","sleepTime","timezone"],"type":"object"}');var se=a(8570),ne=a.n(se);const re=(0,n.createContext)({state:{fullSchema:{},userSchema:{},jsonPointer:"",data:"{}",schemaRef:void 0,editorRef:void 0,schemaErrors:[],dataErrors:[]},updateState:()=>{}}),oe=()=>(0,n.useContext)(re),le=re.Provider,ce=e=>{let{onConvert:t,onCopyConfig:a,onCopyCode:i,onPaste:s}=e;const r={toolbar:{display:"flex",justifyContent:"flex-start",alignItems:"center",padding:"8px",backgroundColor:"inherit"},icon:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"32px",height:"32px",marginRight:"8px",backgroundColor:"transparent",cursor:"pointer",border:"1px solid",fontWeight:"bold",fontSize:"16px"}};return n.createElement("div",{style:r.toolbar},n.createElement("h1",null,"Config JSON"),"\xa0",n.createElement("div",{style:{flex:1}}),n.createElement("button",{style:r.icon,onClick:s,title:"Paste config from clipboard"},"\ud83d\udccb"),n.createElement("button",{style:r.icon,onClick:t,title:"Convert config (Gmail2GDrive -> GmailProcessor)"},"\ud83d\udd04"),n.createElement("button",{style:r.icon,onClick:a,title:"Copy just the config to clipboard"},"\ud83d\uddd0"),n.createElement("button",{style:r.icon,onClick:i,title:"Copy the full executable code to clipboard"},"\ud83d\ude80"))},de=e=>{let{onToggleSchema:t}=e;const a={toolbar:{display:"flex",justifyContent:"flex-start",alignItems:"center",padding:"8px",backgroundColor:"inherit"},icon:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"32px",height:"32px",marginRight:"8px",backgroundColor:"transparent",cursor:"pointer",border:"1px solid",fontWeight:"bold"}};return n.createElement("div",{style:a.toolbar},n.createElement("h1",null,"Schema"),"\xa0",n.createElement("div",{style:{flex:1}}),n.createElement("button",{style:a.icon,onClick:t,title:"Toggle config schema version"},"\ud83c\udf00"))};var me=a(5678);const he={settings:{markProcessedMethod:"mark-read"},global:{},threads:[{match:{query:"from:some.email@gmail.com"},attachments:[{match:{name:"^my-file-.+.pdf$"},actions:[{name:"thread.storePDF",args:{folder:"folder/${message.date:format:yyyy-MM-dd}/${attachment.name}"}}]}]}]};function fe(){const{state:{fullSchema:e,editorRef:t,data:a},updateState:i}=oe(),{colorMode:r}=(0,s.I)();async function l(e){const t=JSON.parse(e).rules?ie:X;i({fullSchema:t,data:e})}return n.createElement("div",{style:{display:"flex"}},n.createElement("div",{style:{flex:"50%",height:"800px"}},n.createElement("div",{style:{boxSizing:"border-box",width:"100%"}},n.createElement(ce,{onConvert:async function(){const e=t.getModel().getValue();try{const t=JSON.parse(e);if(console.log(`Keys: ${Object.keys(t)}`),!Object.keys(t).includes("rules"))return void me.Am.success("Not a Gmail2GDrive config!");const a=function(e){return h(e,Q({settings:{markProcessedMethod:B.MARK_MESSAGE_READ},threads:[{}]}),{attachments:A,global:q,messages:w,settings:K,threads:U})}(ae.v1ConfigToV2ConfigJson(t));l(JSON.stringify(a,null,2))}catch(a){return void me.Am.success(`Conversion error: ${a}`)}},onCopyConfig:async function(){const e=t.getModel().getValue()||"";await navigator.clipboard.writeText(e),me.Am.success("Config copied")},onCopyCode:async function(){const e=`const config = ${(t.getModel().getValue()||"").trim()}\n    \nfunction run() {\n  GmailProcessorLib.run(config, "dry-run")\n}\n`;await navigator.clipboard.writeText(e),me.Am.success("Code copied")},onPaste:async function(){l(await navigator.clipboard.readText()),me.Am.success("Config pasted")}}),n.createElement(o(),{value:a,schema:e,theme:"dark"===r?"vs-dark":"vs",editorDidMount:e=>{i({editorRef:e})},height:"70vh",key:JSON.stringify(e)}))),n.createElement("div",{style:{flex:"50%",height:"800px"}},n.createElement(de,{onToggleSchema:async function(){const t=e===X?ie:X;i({fullSchema:t,userSchema:t})}}),n.createElement("div",{style:{overflow:"auto",height:"800px"}},n.createElement(ne(),{schema:e,key:JSON.stringify(e)}))))}function ue(){const e=X,[t,a]=n.useState({jsonPointer:"",data:JSON.stringify(he,null,2),userSchema:e,fullSchema:e});return n.createElement(le,{value:{state:t,updateState:function(e){a((t=>({...t,...e})))}}},n.createElement(fe,null))}function ge(){return n.createElement(i.default,{fallback:n.createElement("div",null,"Loading...")},(()=>n.createElement(ue,null)))}},3346:(e,t,a)=>{a.r(t),a.d(t,{default:()=>c});var i=a(1262),s=a(4763),n=a(179),r=a(7294),o=a(5678);a(5761);function l(){return r.createElement(s.default,{fallback:e=>{let{error:t,tryAgain:a}=e;return r.createElement("div",null,r.createElement("p",null,"Playground component crashed because of error: ",t.message,"."),r.createElement("button",{onClick:a},"Try Again!"))}},r.createElement(i.default,{fallback:r.createElement("div",null,"Loading...")},(()=>{const e=a(9654).Z;return r.createElement(e,null)})))}function c(){return r.createElement(n.Z,{title:"Playground",description:"Playground of docusaurus-json-schema-plugin"},r.createElement(l,null),r.createElement(o.Ix,{position:o.Am.POSITION.BOTTOM_RIGHT,autoClose:3e3}))}},8385:e=>{e.exports=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","additionalProperties":false,"definitions":{"AttachmentActionConfig":{"additionalProperties":false,"description":"Represents a config to perform a actions for a GMail attachment.","properties":{"args":{"additionalProperties":{},"description":"The arguments for a certain action","title":"args","type":"object"},"description":{"default":"","description":"The description for the action","title":"description","type":"string"},"name":{"default":"","description":"The name of the action to be executed","enum":["","attachment.store","global.log","global.panic","global.sheetLog","message.forward","message.markRead","message.markUnread","message.moveToTrash","message.star","message.storeFromURL","message.storePDF","message.unstar","thread.addLabel","thread.markImportant","thread.markRead","thread.markUnimportant","thread.markUnread","thread.moveToArchive","thread.moveToInbox","thread.moveToSpam","thread.moveToTrash","thread.removeLabel","thread.storePDF"],"title":"name","type":"string"},"processingStage":{"description":"The processing stage in which the action should run (during main processing stage or pre-main/post-main)","enum":["main","post-main","pre-main"],"title":"processingStage","type":"string"}},"required":["name"],"title":"AttachmentActionConfig","type":"object"},"AttachmentConfig":{"additionalProperties":false,"description":"Represents a config to handle a certain GMail attachment","properties":{"actions":{"default":[],"description":"The list actions to be executed for their respective handler scopes","items":{"$ref":"#/definitions/AttachmentActionConfig"},"title":"actions","type":"array"},"description":{"default":"","description":"The description of the attachment handler config","title":"description","type":"string"},"match":{"$ref":"#/definitions/AttachmentMatchConfig","description":"Specifies which attachments match for further processing","title":"match"},"name":{"default":"","description":"The unique name of the attachment config (will be generated if not set)","title":"name","type":"string"}},"title":"AttachmentConfig","type":"object"},"AttachmentMatchConfig":{"additionalProperties":false,"description":"Represents a config to match a certain GMail attachment","properties":{"contentType":{"default":".*","description":"A RegEx matching the content type of the attachment","title":"contentType","type":"string"},"includeAttachments":{"default":true,"description":"Should regular attachments be included in attachment processing (default: true)","title":"includeAttachments","type":"boolean"},"includeInlineImages":{"default":true,"description":"Should inline images be included in attachment processing (default: true)","title":"includeInlineImages","type":"boolean"},"largerThan":{"default":-1,"description":"Only include attachments larger than the given size in bytes.\\nSet to `-1` to ignore it.","title":"largerThan","type":"number"},"name":{"default":"(.*)","description":"A RegEx matching the name of the attachment","title":"name","type":"string"},"smallerThan":{"default":-1,"description":"Only include attachments smaller than the given size in bytes.\\nSet to `-1` to ignore it.","title":"smallerThan","type":"number"}},"title":"AttachmentMatchConfig","type":"object"},"GlobalConfig":{"additionalProperties":false,"description":"The global configuration defines matching and actions for all threads, messages or attachments.","properties":{"attachment":{"$ref":"#/definitions/AttachmentConfig","description":"The global attachment config affecting each attachment.","title":"attachment"},"message":{"$ref":"#/definitions/MessageConfig","description":"The global message config affecting each message.","title":"message"},"thread":{"$ref":"#/definitions/ThreadConfig","description":"The list of global thread affecting each thread.","title":"thread"},"variables":{"default":[],"description":"A list of variable entries to be used in substitutions to simplify configurations.","items":{"$ref":"#/definitions/VariableEntry"},"title":"variables","type":"array"}},"title":"GlobalConfig","type":"object"},"MessageActionConfig":{"additionalProperties":false,"description":"Represents a config to perform a actions for a GMail message.","properties":{"args":{"additionalProperties":{},"description":"The arguments for a certain action","title":"args","type":"object"},"description":{"default":"","description":"The description for the action","title":"description","type":"string"},"name":{"default":"","description":"The name of the action to be executed","enum":["","global.log","global.panic","global.sheetLog","message.forward","message.markRead","message.markUnread","message.moveToTrash","message.star","message.storeFromURL","message.storePDF","message.unstar","thread.addLabel","thread.markImportant","thread.markRead","thread.markUnimportant","thread.markUnread","thread.moveToArchive","thread.moveToInbox","thread.moveToSpam","thread.moveToTrash","thread.removeLabel","thread.storePDF"],"title":"name","type":"string"},"processingStage":{"description":"The processing stage in which the action should run (during main processing stage or pre-main/post-main)","enum":["main","post-main","pre-main"],"title":"processingStage","type":"string"}},"required":["name"],"title":"MessageActionConfig","type":"object"},"MessageConfig":{"additionalProperties":false,"description":"Represents a config to handle a certain GMail message","properties":{"actions":{"default":[],"description":"The list actions to be executed for their respective handler scopes","items":{"$ref":"#/definitions/MessageActionConfig"},"title":"actions","type":"array"},"attachments":{"default":[],"description":"The list of handler that define the way attachments are processed","items":{"$ref":"#/definitions/AttachmentConfig"},"title":"attachments","type":"array"},"description":{"default":"","description":"The description of the message handler config","title":"description","type":"string"},"match":{"$ref":"#/definitions/MessageMatchConfig","description":"Specifies which attachments match for further processing","title":"match"},"name":{"default":"","description":"The unique name of the message config (will be generated if not set)","title":"name","type":"string"}},"title":"MessageConfig","type":"object"},"MessageFlag":{"description":"A flag to match messages with certain properties.","enum":["read","starred","unread","unstarred"],"title":"MessageFlag","type":"string"},"MessageMatchConfig":{"additionalProperties":false,"description":"Represents a config to match a certain GMail message","properties":{"body":{"default":".*","description":"A RegEx matching the body of messages","title":"body","type":"string"},"from":{"default":".*","description":"A RegEx matching the sender email address of messages","title":"from","type":"string"},"is":{"default":[],"description":"A list of properties matching messages should have","items":{"$ref":"#/definitions/MessageFlag"},"title":"is","type":"array"},"newerThan":{"default":"","description":"An RFC 3339 date/time format matching messages older than the given date/time","title":"newerThan","type":"string"},"olderThan":{"default":"","description":"An RFC 3339 date/time format matching messages older than the given date/time","title":"olderThan","type":"string"},"plainBody":{"default":".*","description":"A RegEx matching the plain body of messages","title":"plainBody","type":"string"},"subject":{"default":".*","description":"A RegEx matching the subject of messages","title":"subject","type":"string"},"to":{"default":".*","description":"A RegEx matching the recipient email address of messages","title":"to","type":"string"}},"title":"MessageMatchConfig","type":"object"},"SettingsConfig":{"additionalProperties":false,"description":"Represents a settings config that affect the way GmailProcessor works.","properties":{"logSheetLocation":{"default":"","description":"Path of the spreadsheet log file. Enables logging to a spreadsheet if not empty.\\nExample: `GmailProcessor/logsheet-${date.now:format:yyyy-MM}`","title":"logSheetLocation","type":"string"},"markProcessedLabel":{"default":"","description":"The label to be added to processed GMail threads (only for markProcessedMode=\\"label\\", deprecated - only for compatibility to v1)","title":"markProcessedLabel","type":"string"},"markProcessedMethod":{"description":"The method to mark processed threads/messages.","enum":["add-label","custom","mark-read"],"title":"markProcessedMethod","type":"string"},"maxBatchSize":{"default":10,"description":"The maximum batch size of threads to process in a single run to respect Google processing limits","title":"maxBatchSize","type":"number"},"maxRuntime":{"default":280,"description":"The maximum runtime in seconds for a single run to respect Google processing limits","title":"maxRuntime","type":"number"},"sleepTimeAttachments":{"default":0,"description":"The sleep time in milliseconds between processing each attachment","title":"sleepTimeAttachments","type":"number"},"sleepTimeMessages":{"default":0,"description":"The sleep time in milliseconds between processing each message","title":"sleepTimeMessages","type":"number"},"sleepTimeThreads":{"default":100,"description":"The sleep time in milliseconds between processing each thread","title":"sleepTimeThreads","type":"number"},"timezone":{"default":"default","description":"The timezone to be used for date/time operations.\\nValue `default` uses the <a href=\\"https://developers.google.com/apps-script/reference/base/session#getscripttimezone\\">script timezone</a>.","title":"timezone","type":"string"}},"title":"SettingsConfig","type":"object"},"ThreadActionConfig":{"additionalProperties":false,"description":"Represents a config to perform a actions for a GMail thread.","properties":{"args":{"additionalProperties":{},"description":"The arguments for a certain action","title":"args","type":"object"},"description":{"default":"","description":"The description for the action","title":"description","type":"string"},"name":{"default":"","description":"The name of the action to be executed","enum":["","global.log","global.panic","global.sheetLog","thread.addLabel","thread.markImportant","thread.markRead","thread.markUnimportant","thread.markUnread","thread.moveToArchive","thread.moveToInbox","thread.moveToSpam","thread.moveToTrash","thread.removeLabel","thread.storePDF"],"title":"name","type":"string"},"processingStage":{"description":"The processing stage in which the action should run (during main processing stage or pre-main/post-main)","enum":["main","post-main","pre-main"],"title":"processingStage","type":"string"}},"required":["name"],"title":"ThreadActionConfig","type":"object"},"ThreadConfig":{"additionalProperties":false,"description":"Represents a config handle a certain GMail thread","properties":{"actions":{"default":[],"description":"The list actions to be executed for their respective handler scopes","items":{"$ref":"#/definitions/ThreadActionConfig"},"title":"actions","type":"array"},"attachments":{"default":[],"description":"The list of handler that define the way attachments are processed","items":{"$ref":"#/definitions/AttachmentConfig"},"title":"attachments","type":"array"},"description":{"default":"","description":"The description of the thread handler config","title":"description","type":"string"},"match":{"$ref":"#/definitions/ThreadMatchConfig","description":"Specifies which threads match for further processing","title":"match"},"messages":{"default":[],"description":"The list of handler that define the way nested messages or attachments are processed","items":{"$ref":"#/definitions/MessageConfig"},"title":"messages","type":"array"},"name":{"default":"","description":"The unique name of the thread config (will be generated if not set)","title":"name","type":"string"}},"title":"ThreadConfig","type":"object"},"ThreadMatchConfig":{"additionalProperties":false,"description":"Represents a config to match a certain GMail thread","properties":{"firstMessageSubject":{"default":".*","description":"The regex to match `firstMessageSubject`","title":"firstMessageSubject","type":"string"},"labels":{"default":".*","description":"The regex to match at least one label","title":"labels","type":"string"},"maxMessageCount":{"default":-1,"description":"The maximum number of messages a matching thread is allowed to have.\\nSet to `-1` to ignore it.","title":"maxMessageCount","type":"number"},"minMessageCount":{"default":1,"description":"The minimum number of messages a matching thread must have.\\nSet to `-1` to ignore it.","title":"minMessageCount","type":"number"},"query":{"default":"","description":"The GMail search query additional to the global query to find threads to be processed.\\nSee [Search operators you can use with Gmail](https://support.google.com/mail/answer/7190?hl=en) for more information.","title":"query","type":"string"}},"title":"ThreadMatchConfig","type":"object"},"VariableEntry":{"additionalProperties":false,"description":"A variable entry available for string substitution (using `${variables.<varName>}`)","properties":{"key":{"title":"key","type":"string"},"value":{"title":"value","type":"string"}},"required":["key","value"],"title":"VariableEntry","type":"object"}},"description":"The input configuration for Gmail Processor.","properties":{"attachments":{"default":[],"description":"The list of handler that define the way attachments are processed","items":{"$ref":"#/definitions/AttachmentConfig"},"title":"attachments","type":"array"},"description":{"default":"","description":"The description of the GmailProcessor config","title":"description","type":"string"},"global":{"$ref":"#/definitions/GlobalConfig","description":"The global configuration that defines matching for all threads as well as actions for all threads, messages or attachments.","title":"global"},"messages":{"default":[],"description":"The list of handler that define the way nested messages or attachments are processed","items":{"$ref":"#/definitions/MessageConfig"},"title":"messages","type":"array"},"settings":{"$ref":"#/definitions/SettingsConfig","description":"Represents a settings config that affect the way GmailProcessor works.","title":"settings"},"threads":{"default":[],"description":"The list of handler that define the way nested threads, messages or attachments are processed","items":{"$ref":"#/definitions/ThreadConfig"},"title":"threads","type":"array"}},"type":"object"}')}}]);