"use strict";(self.webpackChunkgmail_processor_docs=self.webpackChunkgmail_processor_docs||[]).push([[4213],{9995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>f,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var a=n(4848),o=n(8453),s=n(5696);const r='{\n  "description": "Convert MS Office attachments into Google formats.",\n  "settings": {\n    "logSheetLocation": "/GmailProcessor-Tests/logsheet-${date.now:date::yyyy-MM}",\n    "markProcessedMethod": "mark-read"\n  },\n  "global": {\n    "thread": {\n      "match": {\n        "query": "has:attachment -in:trash -in:drafts -in:spam after:${date.now:date::yyyy-MM-dd} is:unread subject:\\"[GmailProcessor-Test] convertToGoogle\\"",\n        "maxMessageCount": -1,\n        "minMessageCount": 1\n      }\n    }\n  },\n  "threads": [\n    {\n      "match": {\n        "query": "from:${user.email} to:${user.email} subject:\'Test with office attachments\'"\n      },\n      "attachments": [\n        {\n          "description": "Process *.docx attachment files",\n          "match": {\n            "name": "(?<basename>.+)\\\\.docx$"\n          },\n          "actions": [\n            {\n              "description": "Store original docx file",\n              "name": "attachment.store",\n              "args": {\n                "conflictStrategy": "replace",\n                "location": "/GmailProcessor-Tests/e2e/${attachment.name}"\n              }\n            },\n            {\n              "description": "Store docx file converted to Google Docs format",\n              "name": "attachment.store",\n              "args": {\n                "conflictStrategy": "replace",\n                "location": "/GmailProcessor-Tests/e2e/${attachment.name.match.basename}",\n                "toMimeType": "application/vnd.google-apps.document"\n              }\n            }\n          ]\n        },\n        {\n          "description": "Process *.pptx attachment files",\n          "match": {\n            "name": "(?<basename>.+)\\\\.pptx$"\n          },\n          "actions": [\n            {\n              "description": "Store original pptx file",\n              "name": "attachment.store",\n              "args": {\n                "conflictStrategy": "replace",\n                "location": "/GmailProcessor-Tests/e2e/${attachment.name}"\n              }\n            },\n            {\n              "description": "Store pptx file converted to Google Presentations format",\n              "name": "attachment.store",\n              "args": {\n                "conflictStrategy": "replace",\n                "location": "/GmailProcessor-Tests/e2e/${attachment.name.match.basename}",\n                "toMimeType": "application/vnd.google-apps.presentation"\n              }\n            }\n          ]\n        },\n        {\n          "description": "Process *.xlsx attachment files",\n          "match": {\n            "name": "(?<basename>.+)\\\\.xlsx$"\n          },\n          "actions": [\n            {\n              "description": "Store original xlsx file",\n              "name": "attachment.store",\n              "args": {\n                "conflictStrategy": "replace",\n                "location": "/GmailProcessor-Tests/e2e/${attachment.name}"\n              }\n            },\n            {\n              "description": "Store xlsx file converted to Google Spreadsheet format",\n              "name": "attachment.store",\n              "args": {\n                "conflictStrategy": "replace",\n                "location": "/GmailProcessor-Tests/e2e/${attachment.name.match.basename}",\n                "toMimeType": "application/vnd.google-apps.spreadsheet"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n',c='function convertToGoogleRun() {\n  const config = {\n    description: "Convert MS Office attachments into Google formats.",\n    settings: {\n      logSheetLocation:\n        "/GmailProcessor-Tests/logsheet-${date.now:date::yyyy-MM}",\n      markProcessedMethod: "mark-read",\n    },\n    global: {\n      thread: {\n        match: {\n          query:\n            \'has:attachment -in:trash -in:drafts -in:spam after:${date.now:date::yyyy-MM-dd} is:unread subject:"[GmailProcessor-Test] convertToGoogle"\',\n          maxMessageCount: -1,\n          minMessageCount: 1,\n        },\n      },\n    },\n    threads: [\n      {\n        match: {\n          query:\n            "from:${user.email} to:${user.email} subject:\'Test with office attachments\'",\n        },\n        attachments: [\n          {\n            description: "Process *.docx attachment files",\n            match: {\n              name: "(?<basename>.+)\\\\.docx$",\n            },\n            actions: [\n              {\n                description: "Store original docx file",\n                name: "attachment.store",\n                args: {\n                  conflictStrategy: "replace",\n                  location: "/GmailProcessor-Tests/e2e/${attachment.name}",\n                },\n              },\n              {\n                description: "Store docx file converted to Google Docs format",\n                name: "attachment.store",\n                args: {\n                  conflictStrategy: "replace",\n                  location:\n                    "/GmailProcessor-Tests/e2e/${attachment.name.match.basename}",\n                  toMimeType: "application/vnd.google-apps.document",\n                },\n              },\n            ],\n          },\n          {\n            description: "Process *.pptx attachment files",\n            match: {\n              name: "(?<basename>.+)\\\\.pptx$",\n            },\n            actions: [\n              {\n                description: "Store original pptx file",\n                name: "attachment.store",\n                args: {\n                  conflictStrategy: "replace",\n                  location: "/GmailProcessor-Tests/e2e/${attachment.name}",\n                },\n              },\n              {\n                description:\n                  "Store pptx file converted to Google Presentations format",\n                name: "attachment.store",\n                args: {\n                  conflictStrategy: "replace",\n                  location:\n                    "/GmailProcessor-Tests/e2e/${attachment.name.match.basename}",\n                  toMimeType: "application/vnd.google-apps.presentation",\n                },\n              },\n            ],\n          },\n          {\n            description: "Process *.xlsx attachment files",\n            match: {\n              name: "(?<basename>.+)\\\\.xlsx$",\n            },\n            actions: [\n              {\n                description: "Store original xlsx file",\n                name: "attachment.store",\n                args: {\n                  conflictStrategy: "replace",\n                  location: "/GmailProcessor-Tests/e2e/${attachment.name}",\n                },\n              },\n              {\n                description:\n                  "Store xlsx file converted to Google Spreadsheet format",\n                name: "attachment.store",\n                args: {\n                  conflictStrategy: "replace",\n                  location:\n                    "/GmailProcessor-Tests/e2e/${attachment.name.match.basename}",\n                  toMimeType: "application/vnd.google-apps.spreadsheet",\n                },\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  }\n\n  return GmailProcessorLib.run(config, "dry-run")\n}\n';var i=n(9490);const l={id:"convertToGoogle",title:"Convert to Google",description:"Convert MS Office attachments into Google formats."},m=void 0,d={id:"examples/features/convertToGoogle",title:"Convert to Google",description:"Convert MS Office attachments into Google formats.",source:"@site/docs/examples/features/convertToGoogle.mdx",sourceDirName:"examples/features",slug:"/examples/features/convertToGoogle",permalink:"/gmail-processor/docs/examples/features/convertToGoogle",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/features/convertToGoogle.mdx",tags:[],version:"current",frontMatter:{id:"convertToGoogle",title:"Convert to Google",description:"Convert MS Office attachments into Google formats."},sidebar:"docsSidebar",previous:{title:"Features",permalink:"/gmail-processor/docs/examples/features/"},next:{title:"GMail2GDrive Migration",permalink:"/gmail-processor/docs/examples/migrations/"}},u={},h=[];function p(e){const t={code:"code",p:"p",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"This example shows how to convert MS Office attachments into Google formats."}),"\n",(0,a.jsxs)(t.p,{children:["Use the argument ",(0,a.jsx)(t.code,{children:"toMimeType"})," of the action ",(0,a.jsx)(t.code,{children:"attachment.store"})," to convert the document into one of the supported formats."]}),"\n",(0,a.jsx)(s.A,{info:i.pq,config:r,script:c})]})}function f(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},9365:(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});n(6540);var a=n(4164);const o={tabItem:"tabItem_Ymn6"};var s=n(4848);function r(e){let{children:t,hidden:n,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,r),hidden:n,children:t})}},1470:(e,t,n)=>{n.r(t),n.d(t,{default:()=>T});var a=n(6540),o=n(4164),s=n(3104),r=n(6347),c=n(205),i=n(7485),l=n(1682),m=n(679);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const o=(0,r.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(o.location.search);t.set(s,e),o.replace({...o.location,search:t.toString()})}),[s,o])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,s=u(e),[r,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[l,d]=p({queryString:n,groupId:o}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,s]=(0,m.Dv)(n);return[o,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:o}),v=(()=>{const e=l??f;return h({value:e,tabValues:s})?e:null})();(0,c.A)((()=>{v&&i(v)}),[v]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),g(e)}),[d,g,s]),tabValues:s}}var g=n(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var S=n(4848);function b(e){let{className:t,block:n,selectedValue:a,selectValue:r,tabValues:c}=e;const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),m=e=>{const t=e.currentTarget,n=i.indexOf(t),o=c[n].value;o!==a&&(l(t),r(o))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,S.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:c.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,S.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>i.push(e),onKeyDown:d,onClick:m,...s,className:(0,o.A)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:s}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,S.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function x(e){const t=f(e);return(0,S.jsxs)("div",{className:(0,o.A)("tabs-container",v.tabList),children:[(0,S.jsx)(b,{...t,...e}),(0,S.jsx)(y,{...t,...e})]})}function T(e){const t=(0,g.A)();return(0,S.jsx)(x,{...e,children:d(e.children)},String(t))}},5696:(e,t,n)=>{n.d(t,{A:()=>h});var a=n(8774),o=n(1432),s=n(9365),r=n(1470),c=(n(6540),n(301)),i=n(4848);const l="https://github.com/ahochsteger/gmail-processor/blob/main/src/examples",m="https://github.com/ahochsteger/gmail-processor/issues",d="https://github.com/ahochsteger/gmail-processor/pull";function u(e,t,n){let a=[];return n&&n.length>0&&(a=[(0,i.jsxs)("span",{children:[" | ",e,": "]},`${e}-0`)].concat(n?.map(((e,n,a)=>(0,i.jsxs)("span",{children:[(0,i.jsxs)("a",{href:`${t}/${e}`,children:["#",e]}),n<a.length-1?" ":""]},e)))),a.push((0,i.jsx)("span",{}))),a}function h(e){let{info:t,config:n,script:h}=e;return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)("p",{children:["\ud83d\udc49 Edit this example in the ",(0,i.jsx)(a.A,{href:`/playground?example=${t.name}`,children:"playground"}),t.variant===c.sE.MIGRATION_V1?" and automatically migrate it to the v2 format using the convert button":"","."]}),(0,i.jsxs)(r.default,{children:[(0,i.jsx)(s.default,{value:"config",label:"Config",default:!0,children:(0,i.jsx)(o.default,{language:"js",showLineNumbers:!0,children:n})}),(0,i.jsx)(s.default,{value:"script",label:"Script",children:(0,i.jsx)(o.default,{language:"js",showLineNumbers:!0,children:h})})]}),(0,i.jsxs)("p",{children:[(0,i.jsxs)("span",{children:["Source: ",(0,i.jsxs)("a",{href:`${l}/${t.category}/${t.name}`,children:[t.name,".ts"]})]}),u("Issues",m,t.issues),u("PRs",d,t.pullRequests)]})]})}},301:(e,t,n)=>{n.d(t,{bk:()=>o,lI:()=>a,sE:()=>s});let a=function(e){return e.ACTIONS="actions",e.ADVANCED="advanced",e.BASICS="basics",e.FEATURES="features",e.MIGRATIONS="migrations",e.REGRESSIONS="regressions",e}({}),o=function(e){return e.CONFIG="config",e.DOCS="docs",e.DOCS_INDEX="docs-index",e.GAS_CODE="gas-code",e.GAS_TEST="gas-test",e.TEST_SPEC="test-spec",e}({}),s=function(e){return e.CUSTOM_ACTIONS="custom-actions",e.MIGRATION_V1="migration-v1",e}({})},9490:(e,t,n)=>{n.d(t,{Fw:()=>i,pq:()=>r});var a=n(8158),o=n(6407),s=n(7694);const r={name:"convertToGoogle",title:"Convert to Google",description:"Convert MS Office attachments into Google formats.",category:n(301).lI.FEATURES,pullRequests:[197]},c={description:r.description,settings:{logSheetLocation:"/GmailProcessor-Tests/logsheet-${date.now:date::yyyy-MM}",markProcessedMethod:o.Pn.MARK_MESSAGE_READ},global:{thread:{match:{query:`has:attachment -in:trash -in:drafts -in:spam after:\${date.now:date::yyyy-MM-dd} is:unread subject:"${s.L.EMAIL_SUBJECT_PREFIX}${r.name}"`,maxMessageCount:-1,minMessageCount:1}}},threads:[{match:{query:"from:${user.email} to:${user.email} subject:'Test with office attachments'"},attachments:[{description:"Process *.docx attachment files",match:{name:"(?<basename>.+)\\.docx$"},actions:[{description:"Store original docx file",name:"attachment.store",args:{conflictStrategy:a.c2.REPLACE,location:`${s.L.DRIVE_TESTS_BASE_PATH}/\${attachment.name}`}},{description:"Store docx file converted to Google Docs format",name:"attachment.store",args:{conflictStrategy:a.c2.REPLACE,location:`${s.L.DRIVE_TESTS_BASE_PATH}/\${attachment.name.match.basename}`,toMimeType:"application/vnd.google-apps.document"}}]},{description:"Process *.pptx attachment files",match:{name:"(?<basename>.+)\\.pptx$"},actions:[{description:"Store original pptx file",name:"attachment.store",args:{conflictStrategy:a.c2.REPLACE,location:`${s.L.DRIVE_TESTS_BASE_PATH}/\${attachment.name}`}},{description:"Store pptx file converted to Google Presentations format",name:"attachment.store",args:{conflictStrategy:a.c2.REPLACE,location:`${s.L.DRIVE_TESTS_BASE_PATH}/\${attachment.name.match.basename}`,toMimeType:"application/vnd.google-apps.presentation"}}]},{description:"Process *.xlsx attachment files",match:{name:"(?<basename>.+)\\.xlsx$"},actions:[{description:"Store original xlsx file",name:"attachment.store",args:{conflictStrategy:a.c2.REPLACE,location:`${s.L.DRIVE_TESTS_BASE_PATH}/\${attachment.name}`}},{description:"Store xlsx file converted to Google Spreadsheet format",name:"attachment.store",args:{conflictStrategy:a.c2.REPLACE,location:`${s.L.DRIVE_TESTS_BASE_PATH}/\${attachment.name.match.basename}`,toMimeType:"application/vnd.google-apps.spreadsheet"}}]}]}]},i={info:r,config:c}},2744:(e,t,n)=>{n.d(t,{Ah:()=>o,GS:()=>r,KI:()=>s,jV:()=>a});let a=function(e){return e.DRY_RUN="dry-run",e.SAFE_MODE="safe-mode",e.DANGEROUS="dangerous",e}({}),o=function(e){return e.BOOLEAN="boolean",e.DATE="date",e.NUMBER="number",e.STRING="string",e.VARIABLE="variable",e}({});function s(e,t,n,a,o){return{deprecationInfo:o,description:a,title:n,type:e,value:t}}let r=function(e){return e.ERROR="error",e.OK="ok",e}({});Error},8158:(e,t,n)=>{n.d(t,{c2:()=>W});n(2744);var a=n(9749),o=n(857),s=n(7015),r=n(6749),c=n(3863),i=n(641),l=n(4773),m=n(2511),d=n(53),u=n(7456),h=n(6712),p=n(262),f=n(2695),g=n(5940),v=n(4844),S=n(9772),b=n(8908),y=n(7256),x=n(739),T=n(3365),E=n(4912),A=n(2829),$=n(5668),M=n(8274),G=n(341),P=n(5076),R=n(297),k=n(3572),_=n(9446),j=n(7616),I=n(2190),C=n(9585),L=n(6672),w=n(7244),D=n(4138),V=n(7376),O=n(8933),N=n(2702),U=n(1906),B=n(6560),q=n(7038),F=n(9590),H=n(2745),K=n(5407),z=n(3945),J=n(6014);n(4712),n(4758),n(3711);a.D,o.z,s.F,r.g,c.f,i.V,l.p,m.j,d.x,u.o,h.o,p.Q,f.B,g.o,v.d,S.K,b.W,y.E,x.T,T.j,E.u,A.R,$.u,M.G,G.H,P.M,R.N,k._,_.D,j.W,I.i,C.N,L.G,w.o,D.M,V.Q,O.b,N.w,U.c,B.w,q.a,F.a,H.R,K.R,z.D,J.K;let W=function(e){return e.BACKUP="backup",e.ERROR="error",e.KEEP="keep",e.REPLACE="replace",e.SKIP="skip",e.UPDATE="update",e}({})},6407:(e,t,n)=>{n.d(t,{$b:()=>l,GJ:()=>h,Pn:()=>m,c1:()=>f,we:()=>p});var a=n(4729),o=n(4467),s=n(8420),r=n(5136),c=n(5698),i=(n(5508),n(7158));let l=function(e){return e.TRACE="trace",e.DEBUG="debug",e.INFO="info",e.WARN="warn",e.ERROR="error",e}({}),m=function(e){return e.ADD_THREAD_LABEL="add-label",e.CUSTOM="custom",e.MARK_MESSAGE_READ="mark-read",e}({});class d{constructor(){(0,o.A)(this,"name",""),(0,o.A)(this,"title",""),(0,o.A)(this,"value",void 0),(0,o.A)(this,"ctxValues",{})}}let u=function(e){return e.NONE="none",e.AUTO="auto",e.ALL="all",e}({}),h=(0,a.A)(null,(function(e){return{F:class{constructor(){e(this)}},d:[{kind:"field",key:"defaultTimestampFormat",value:()=>"yyyy-MM-dd HH:mm:ss"},{kind:"field",key:"defaultArrayJoinSeparator",value:()=>","},{kind:"field",decorators:[(0,s.v)()],key:"logSheetLocation",value:()=>""},{kind:"field",decorators:[(0,s.v)()],key:"logFields",value:()=>["log.timestamp","log.level","log.location","log.message","object.id","object.date","object.subject","object.from","object.url","attachment.name","attachment.size","attachment.contentType","stored.location","stored.url","stored.downloadUrl"]},{kind:"field",decorators:[(0,s.v)(),(0,r.Z)((()=>d))],key:"logConfig",value:()=>[{name:"log.timestamp",title:"Timestamp",value:"${date.now:date::yyyy-MM-dd HH:mm:ss.SSS}"},{name:"log.level",title:"Log Level"},{name:"log.message",title:"Log Message"},{name:"context.type",title:"Context Type"},{name:"object.id",title:"ID",ctxValues:{attachment:"${attachment.hash}",message:"${message.id}",thread:"${thread.id}"}},{name:"object.url",title:"GMail URL",ctxValues:{attachment:"${message.url}",message:"${message.url}",thread:"${thread.url}"}},{name:"object.date",title:"Message Date",ctxValues:{attachment:"${message.date}",message:"${message.date}",thread:"${thread.lastMessageDate}"}},{name:"object.subject",title:"Subject",ctxValues:{attachment:"${message.subject}",message:"${message.subject}",thread:"${thread.firstMessageSubject}"}},{name:"object.from",title:"From",ctxValues:{attachment:"${message.from}",message:"${message.from}"}},{name:"attachment.name",title:"Attachment Name"},{name:"attachment.contentType",title:"Content Type"},{name:"attachment.size",title:"Attachment Size"},{name:"stored.location",title:"Stored Location",ctxValues:{attachment:"${attachment.stored.location}"}},{name:"stored.url",title:"Stored URL",ctxValues:{attachment:"${attachment.stored.url}"}},{name:"stored.downloadUrl",title:"Download URL",ctxValues:{attachment:"${attachment.stored.downloadUrl}"}}]},{kind:"field",key:"logLevel",value:()=>l.INFO},{kind:"field",key:"logSensitiveRedactionMode",value:()=>u.AUTO},{kind:"field",key:"logSheetTracing",value:()=>!1},{kind:"field",decorators:[(0,s.v)()],key:"maxBatchSize",value:()=>10},{kind:"field",decorators:[(0,s.v)()],key:"maxRuntime",value:()=>280},{kind:"field",decorators:[(0,s.v)()],key:"markProcessedLabel",value:()=>""},{kind:"field",decorators:[(0,s.v)()],key:"markProcessedMethod",value:()=>m.MARK_MESSAGE_READ},{kind:"field",decorators:[(0,s.v)()],key:"sleepTimeThreads",value:()=>100},{kind:"field",decorators:[(0,s.v)()],key:"sleepTimeMessages",value:()=>0},{kind:"field",decorators:[(0,s.v)()],key:"sleepTimeAttachments",value:()=>0},{kind:"field",decorators:[(0,s.v)()],key:"timezone",value:()=>"default"}]}}));function p(e){return void 0===e&&(e={}),(0,c.bj)(h,e,{exposeDefaultValues:!0,exposeUnsetFields:!1})}function f(e){return e=(0,i.I)(e,p(),{},["markProcessedMethod"])}},7694:(e,t,n)=>{n.d(t,{L:()=>o});var a=n(4467);class o{}(0,a.A)(o,"DRIVE_TESTS_BASE_PATH","/GmailProcessor-Tests/e2e"),(0,a.A)(o,"EMAIL_SLEEP_TIME_MS",1e4),(0,a.A)(o,"EMAIL_SUBJECT_PREFIX","[GmailProcessor-Test] "),(0,a.A)(o,"GIT_REPO_BASE_URL","https://raw.githubusercontent.com/ahochsteger/gmail-processor"),(0,a.A)(o,"GIT_REPO_BRANCH","main"),(0,a.A)(o,"GIT_REPO_TEST_FILES_PATH","src/e2e-test/files")},7158:(e,t,n)=>{function a(e,t,n,a){return void 0===n&&(n={}),void 0===a&&(a=[]),a=a.concat([]),Object.keys(e).forEach((o=>{const s=function(e,t){return Array.isArray(e)&&t?e=e.map((e=>t(e))):"object"==typeof e&&t&&(e=t(e)),e}(e[o],n[o]),r=JSON.stringify(s);a.includes(o)||null!==s&&r!==JSON.stringify(t[o])&&"[]"!==r&&"{}"!==r||delete e[o]})),e}n.d(t,{I:()=>a})}}]);