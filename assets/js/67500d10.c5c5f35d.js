"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[503],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=m(t),d=r,u=p["".concat(l,".").concat(d)]||p[d]||g[d]||o;return t?a.createElement(u,s(s({ref:n},c),{},{components:t})):a.createElement(u,s({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var m=2;m<o;m++)s[m]=t[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2148:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:40},s="Examples",i={unversionedId:"examples",id:"examples",title:"Examples",description:"example01.js",source:"@site/docs/examples.mdx",sourceDirName:".",slug:"/examples",permalink:"/gmail-processor/docs/examples",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples.mdx",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"docsSidebar",previous:{title:"Placeholder",permalink:"/gmail-processor/docs/reference/placeholder"},next:{title:"Contributing",permalink:"/gmail-processor/docs/CONTRIBUTING"}},l={},m=[{value:"example01.js",id:"example01js",level:2},{value:"example02.js",id:"example02js",level:2},{value:"exampleActionError.js",id:"exampleactionerrorjs",level:2},{value:"exampleMin.js",id:"exampleminjs",level:2},{value:"gettingStarted.js",id:"gettingstartedjs",level:2},{value:"migrationExample01.js",id:"migrationexample01js",level:2},{value:"migrationExampleMin.js",id:"migrationexampleminjs",level:2}],c={toc:m},p="wrapper";function g(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("h2",{id:"example01js"},"example01.js"),(0,r.kt)("p",null,"This is a simple configuration example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * This is a simple configuration example.\n * @type {GmailProcessorLib.Config}\n */\nconst example01Config = {\n  description: "An example V2 configuration",\n  settings: {\n    markProcessedMethod:\n      GmailProcessorLib.MarkProcessedMethod.MARK_MESSAGE_READ,\n    maxBatchSize: 10,\n    maxRuntime: 280,\n    sleepTimeThreads: 100,\n    sleepTimeMessages: 0,\n    sleepTimeAttachments: 0,\n    timezone: "UTC",\n  },\n  global: {\n    thread: {\n      match: {\n        query: "has:attachment -in:trash -in:drafts -in:spam newer_than:1d",\n        maxMessageCount: -1,\n        minMessageCount: 1,\n      },\n      actions: [],\n    },\n  },\n  threads: [\n    {\n      description:\n        "Store all attachments sent to my.name+scans@gmail.com to the folder \'Scans\'",\n      match: {\n        query: "to:my.name+scans@gmail.com",\n      },\n      actions: [\n        {\n          name: "thread.storePDF",\n          args: {\n            folder: "Scans-${message.date:format:yyyy-MM-dd}",\n          },\n        },\n      ],\n    },\n  ],\n}\n\n/**\n * Run Gmail Processor with config\n * @param {GoogleAppsScript.Events.TimeDriven | undefined} evt Event information\n * @param {EnvContext | undefined} ctx Environment context\n * @returns {GmailProcessorLib.ProcessingResult} Processing result\n */\nfunction example01Run(_evt, ctx) {\n  return GmailProcessorLib.run(\n    example01Config,\n    GmailProcessorLib.RunMode.DRY_RUN,\n    ctx,\n  )\n}\n')),(0,r.kt)("p",null,"Source file: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ahochsteger/gmail-processor/blob/main/src/gas/examples/example01.js"},"example01.js")),(0,r.kt)("h2",{id:"example02js"},"example02.js"),(0,r.kt)("p",null,"This is a more advanced configuration example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * This is a more advanced configuration example.\n * @type {GmailProcessorLib.Config}\n */\nconst example02Config = {\n  description: "An example V2 configuration",\n  settings: {\n    markProcessedMethod:\n      GmailProcessorLib.MarkProcessedMethod.MARK_MESSAGE_READ,\n    maxBatchSize: 10,\n    maxRuntime: 280,\n    sleepTimeThreads: 100,\n    sleepTimeMessages: 0,\n    sleepTimeAttachments: 0,\n    timezone: "UTC",\n  },\n  global: {\n    thread: {\n      match: {\n        query: "has:attachment -in:trash -in:drafts -in:spam newer_than:1d",\n        maxMessageCount: -1,\n        minMessageCount: 1,\n      },\n      actions: [],\n    },\n  },\n  messages: [\n    {\n      description: "Message shorthand config",\n      match: {\n        subject: "My Subject",\n      },\n    },\n  ],\n  attachments: [\n    {\n      description: "Attachment shorthand config",\n      match: {\n        name: "my-file-.*",\n      },\n    },\n  ],\n  threads: [\n    {\n      description:\n        "Store all attachments sent to my.name+scans@gmail.com to the folder \'Scans\'",\n      match: {\n        query: "to:my.name+scans@gmail.com",\n      },\n      actions: [\n        {\n          name: "thread.storePDF",\n          args: {\n            folder: "Scans-${message.date:format:yyyy-MM-dd}",\n          },\n        },\n      ],\n    },\n  ],\n}\n\n/**\n * Run Gmail Processor with config\n * @param {GoogleAppsScript.Events.TimeDriven | undefined} evt Event information\n * @param {EnvContext | undefined} ctx Environment context\n * @returns {GmailProcessorLib.ProcessingResult} Processing result\n */\nfunction example02Run(_evt, ctx) {\n  return GmailProcessorLib.run(\n    example02Config,\n    GmailProcessorLib.RunMode.DRY_RUN,\n    ctx,\n  )\n}\n')),(0,r.kt)("p",null,"Source file: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ahochsteger/gmail-processor/blob/main/src/gas/examples/example02.js"},"example02.js")),(0,r.kt)("h2",{id:"exampleactionerrorjs"},"exampleActionError.js"),(0,r.kt)("p",null,"This is an example to immediately cancel processing for special use cases.\nIt is used for testing the error handling of actions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * This is an example to immediately cancel processing for special use cases.\n * It is used for testing the error handling of actions.\n * @type {GmailProcessorLib.Config}\n */\nconst exampleActionErrorConfig = {\n  settings: {\n    markProcessedMethod:\n      GmailProcessorLib.MarkProcessedMethod.MARK_MESSAGE_READ,\n    timezone: "UTC",\n  },\n  global: {\n    thread: {\n      match: {\n        query: "has:attachment -in:trash -in:drafts -in:spam newer_than:1d",\n      },\n    },\n  },\n  threads: [\n    {\n      actions: [\n        {\n          name: "global.panic",\n          args: {\n            message: "Test for action error logging",\n          },\n        },\n      ],\n    },\n  ],\n}\n\n/**\n * Run Gmail Processor with config\n * @param {GoogleAppsScript.Events.TimeDriven | undefined} evt Event information\n * @param {EnvContext | undefined} ctx Environment context\n * @returns {GmailProcessorLib.ProcessingResult} Processing result\n */\nfunction exampleActionErrorRun(_evt, ctx) {\n  return GmailProcessorLib.run(\n    exampleActionErrorConfig,\n    GmailProcessorLib.RunMode.DRY_RUN,\n    ctx,\n  )\n}\n')),(0,r.kt)("p",null,"Source file: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ahochsteger/gmail-processor/blob/main/src/gas/examples/exampleActionError.js"},"exampleActionError.js")),(0,r.kt)("h2",{id:"exampleminjs"},"exampleMin.js"),(0,r.kt)("p",null,"This is a minimal configuration example, just with the required information.\nIt just processes files without doing anything, but they will still be marked as processed!\nIt can be used if you want to start your config from scratch."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * This is a minimal configuration example, just with the required information.\n * It just processes files without doing anything, but they will still be marked as processed!\n * It can be used if you want to start your config from scratch.\n * @type {GmailProcessorLib.Config}\n */\nconst exampleMinConfig = {\n  settings: {\n    // Chose a method to mark processed entities:\n    markProcessedMethod:\n      GmailProcessorLib.MarkProcessedMethod.MARK_MESSAGE_READ,\n  },\n  threads: [\n    {\n      // Put thread config here.\n    },\n  ],\n}\n\n/**\n * Run Gmail Processor with config\n * @param {GoogleAppsScript.Events.TimeDriven | undefined} evt Event information\n * @param {EnvContext | undefined} ctx Environment context\n * @returns {GmailProcessorLib.ProcessingResult} Processing result\n */\nfunction exampleMinRun(_evt, ctx) {\n  return GmailProcessorLib.run(\n    exampleMinConfig,\n    GmailProcessorLib.RunMode.DRY_RUN,\n    ctx,\n  )\n}\n")),(0,r.kt)("p",null,"Source file: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ahochsteger/gmail-processor/blob/main/src/gas/examples/exampleMin.js"},"exampleMin.js")),(0,r.kt)("h2",{id:"gettingstartedjs"},"gettingStarted.js"),(0,r.kt)("p",null,"This is a getting started example configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * This is a getting started example configuration.\n * @type {GmailProcessorLib.Config}\n */\nconst config = {\n  settings: {\n    // Decide on the method to be used to mark processed threads/messages:\n    // MARK_MESSAGE_READ: Mark each processed messages as read (can deal with multiple messages per thread but touches the read status)\n    markProcessedMethod:\n      GmailProcessorLib.MarkProcessedMethod.MARK_MESSAGE_READ,\n    // ADD_THREAD_LABEL: Add a label (specified by markProcessedLabel) to the processed thread (unable to deal with multiple messages per thread, but doesn\'t touch the read status)\n    // markProcessedMethod: GmailProcessorLib.MarkProcessedMethod.ADD_THREAD_LABEL,\n    // markProcessedLabel: "GmailProcessor/processed",\n\n    // Add more settings if required ...\n  },\n  global: {\n    // Place global thread, message or attachment configuration here\n  },\n  threads: [\n    // Place thread processing config here\n    {\n      match: {\n        query: "from:some.email@gmail.com",\n      },\n      attachments: [\n        {\n          match: {\n            name: "^my-file-.+.pdf$",\n          },\n          actions: [\n            {\n              name: "thread.storePDF",\n              args: {\n                folder:\n                  "folder/${message.date:format:yyyy-MM-dd}/${attachment.name}",\n              },\n            },\n          ],\n        },\n      ],\n    },\n  ],\n}\n\n/**\n * Run Gmail Processor with config\n * @param {GoogleAppsScript.Events.TimeDriven | undefined} evt Event information\n * @param {EnvContext | undefined} ctx Environment context\n * @returns {GmailProcessorLib.ProcessingResult} Processing result\n */\nfunction run(_evt, ctx) {\n  return GmailProcessorLib.run(config, GmailProcessorLib.RunMode.DRY_RUN, ctx)\n}\n')),(0,r.kt)("p",null,"Source file: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ahochsteger/gmail-processor/blob/main/src/gas/examples/gettingStarted.js"},"gettingStarted.js")),(0,r.kt)("h2",{id:"migrationexample01js"},"migrationExample01.js"),(0,r.kt)("p",null,"This is a Gmail2GDrive v1.x configuration example to demonstrate the conversion to the Gmail Processor v2.x config format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * This is a Gmail2GDrive v1.x configuration example to demonstrate the conversion to the Gmail Processor v2.x config format.\n * @type {GmailProcessorLib.V1Config}\n */\nconst migrationExample01Config = {\n  globalFilter: "has:attachment -in:trash -in:drafts -in:spam",\n  processedLabel: "gmail2gdrive/client-test",\n  sleepTime: 100,\n  maxRuntime: 280,\n  newerThan: "1d",\n  timezone: "GMT",\n  rules: [\n    {\n      filter: "to:my.name+scans@gmail.com",\n      folder: "\'Scans\'-yyyy-MM-dd",\n    },\n    {\n      filter: "from:example1@example.com",\n      folder: "\'Examples/example1\'",\n    },\n    {\n      filter: "from:example2@example.com",\n      folder: "\'Examples/example2\'",\n      filenameFromRegexp: ".*.pdf$",\n    },\n    {\n      filter: "(from:example3a@example.com OR from:example3b@example.com)",\n      folder: "\'Examples/example3ab\'",\n      filenameTo: "\'file-\'yyyy-MM-dd-\'%s.txt\'",\n      archive: true,\n    },\n    {\n      filter: "label:PDF",\n      saveThreadPDF: true,\n      folder: "\'PDF Emails\'",\n    },\n    {\n      filter: "from:example4@example.com",\n      folder: "\'Examples/example4\'",\n      filenameFrom: "file.txt",\n      filenameTo: "\'file-\'yyyy-MM-dd-\'%s.txt\'",\n    },\n  ],\n}\n\n/**\n * Run config conversion\n * @returns {GmailProcessorLib.Config} Converted configuration\n */\nfunction migrationExample01ConvertConfig() {\n  const config = GmailProcessorLib.convertV1Config(migrationExample01Config)\n  console.log(JSON.stringify(config, null, 2))\n  return config\n}\n')),(0,r.kt)("p",null,"Source file: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ahochsteger/gmail-processor/blob/main/src/gas/examples/migrationExample01.js"},"migrationExample01.js")),(0,r.kt)("h2",{id:"migrationexampleminjs"},"migrationExampleMin.js"),(0,r.kt)("p",null,"This is a minimal Gmail2GDrive v1.x configuration example to demonstrate the conversion to the Gmail Processor v2.x config format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * This is a minimal Gmail2GDrive v1.x configuration example to demonstrate the conversion to the Gmail Processor v2.x config format.\n * @type {GmailProcessorLib.V1Config}\n */\nconst migrationExampleMinConfig = {\n  processedLabel: "gmail2gdrive/client-test",\n  sleepTime: 100,\n  maxRuntime: 280,\n  newerThan: "2m",\n  timezone: "GMT",\n  rules: [\n    {\n      filter: "to:my.name+scans@gmail.com",\n      folder: "\'Scans\'-yyyy-MM-dd",\n    },\n  ],\n}\n\n/**\n * Run config conversion\n * @returns {GmailProcessorLib.Config} Converted configuration\n */\nfunction migrationExampleMinConvertConfig() {\n  const config = GmailProcessorLib.convertV1Config(migrationExampleMinConfig)\n  console.log(JSON.stringify(config, null, 2))\n  return config\n}\n')),(0,r.kt)("p",null,"Source file: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ahochsteger/gmail-processor/blob/main/src/gas/examples/migrationExampleMin.js"},"migrationExampleMin.js")))}g.isMDXComponent=!0}}]);