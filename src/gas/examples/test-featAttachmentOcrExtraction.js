/**
 * TODOs:
 * * Generate E2E Json Schema
 * * Provide an e2e init function that can be parameterized with a unique name.
 * * Name e2e tests after features and not PRs (features will be kept, but their original PRs may not be valid forever)
 *
 * Use Cases:
 * * Initialize files in Google Drive
 * * Process email with attachments
 *   * Send email with attachments
 *   * Process a config
 */

/**
 * This is a special configuration used for end-to-end testing using the emails generated by `e2eInit.js`.
 * @type {import("../../lib/e2e/E2E").E2ETestConfig}
 */
const featAttachmentOcrExtractionTestConfig = {
  globals: E2E_GLOBAL_CONFIG,
  initConfig: {
    name: "featAttachmentOcrExtraction",
    mails: [
      {
        attachments: [`invoice.pdf`],
      },
    ],
  },
  runConfig: {
    description:
      "This example demonstrates the use of the action `attachment.extractText` to extract matching text from the attachment body for use in later actions (e.g. `attachment.store`).",
    global: {
      thread: {
        match: {
          query:
            "has:attachment -in:trash -in:drafts -in:spam from:${user.email} to:${user.email} after:${date.now:date:-5m:yyyy-MM-dd}",
        },
      },
    },
    settings: {
      markProcessedMethod: "mark-read",
    },
    threads: [
      {
        match: {
          query: "subject:([GmailProcessor-Test] featAttachmentOcrExtraction)",
        },
        attachments: [
          {
            description: "Process all attachments named 'invoice*.pdf'",
            match: {
              name: "(?<basename>invoice.*)\\.pdf$",
            },
            actions: [
              {
                description:
                  "Extract the text from the body of the PDF attachment using language auto-detection.",
                name: "attachment.extractText",
                args: {
                  docsFileLocation: `${E2E_DRIVE_TESTS_BASE_PATH}/featAttachmentOcrExtraction/\${attachment.name.match.basename} (Google Docs)`,
                  extract:
                    "Invoice date:\\s*(?<invoiceDate>[A-Za-z]{3} [0-9]{1,2}, [0-9]{4})\\s*Invoice number:\\s*(?<invoiceNumber>[0-9]+)\\s*Payment due:\\s(?<paymentDueDays>[0-9]+)\\sdays after invoice date",
                },
                processingStage: "pre-main",
              },
              {
                description:
                  "Store the attachment using extracted values for `invoiceNumber` and `invoiceDate`",
                name: "attachment.store",
                args: {
                  conflictStrategy: "update",
                  location: `${E2E_DRIVE_TESTS_BASE_PATH}/featAttachmentOcrExtraction/\${attachment.name.match.basename}-number-\${attachment.extracted.match.invoiceNumber}-date-\${attachment.extracted.match.invoiceDate:date::yyyy-MM-dd}-due-\${attachment.extracted.match.paymentDueDays}-days.pdf`,
                  description:
                    "Invoice number: ${attachment.extracted.match.invoiceNumber}\nInvoice date: ${attachment.extracted.match.invoiceDate:date::yyyy-MM-dd}\nPayment due: ${attachment.extracted.match.paymentDueDays} days",
                },
              },
            ],
          },
        ],
      },
    ],
  },
  tests: [
    {
      message: "Successful execution",
      assertions: [
        {
          message: "One thread config should have been processed",
          assertFn: (_testConfig, procResult) =>
            procResult.processedThreadConfigs == 1,
        },
        {
          message: "At least one thread should have been processed",
          assertFn: (_testConfig, procResult) =>
            procResult.processedThreads >= 1,
        },
        {
          message: "At least one message should have been processed",
          assertFn: (_testConfig, procResult) =>
            procResult.processedMessages >= 1,
        },
        {
          message: "Correct number of actions should have been executed",
          assertFn: (_testConfig, procResult) =>
            procResult.executedActions.length ==
            procResult.processedMessages + procResult.processedAttachments * 2,
        },
      ],
    },
    {
      message: "No failures",
      assertions: [
        {
          message: "Processing status should not be ERROR",
          assertFn: (_testConfig, procResult) => procResult.status !== "error",
        },
        {
          message: "No error should have occurred",
          assertFn: (_testConfig, procResult) => procResult.error === undefined,
        },
        {
          message: "No action should have failed",
          assertFn: (_testConfig, procResult) =>
            procResult.failedAction === undefined,
        },
      ],
    },
    {
      message: "Skipped tests",
      assertions: [
        {
          message: "Processing status should not be ERROR",
          assertFn: (_testConfig, procResult) => procResult.status !== "error",
          skip: true,
        },
        {
          message: "No error should have occurred",
          assertFn: (_testConfig, procResult) => procResult.error === undefined,
          skip: true,
        },
        {
          message: "No action should have failed",
          assertFn: (_testConfig, procResult) =>
            procResult.failedAction === undefined,
          skip: true,
        },
      ],
    },
  ],
}

/**
 * Run Gmail Processor with config
 * @param {GoogleAppsScript.Events.TimeDriven | undefined} evt Event information
 * @param {EnvContext | undefined} ctx Environment context
 * @returns {GmailProcessorLib.ProcessingResult} Processing result
 */
function testFeatAttachmentOcrExtraction(_evt, ctx) {
  return GmailProcessorLib.E2E.runTests(
    featAttachmentOcrExtractionTestConfig,
    false,
    GmailProcessorLib.RunMode.DANGEROUS,
    ctx,
  )
}
